{
  "version": 3,
  "sources": ["../../aframe-mountain-component/lib/ImprovedNoise.js", "../../aframe-mountain-component/index.js"],
  "sourcesContent": ["// http://mrl.nyu.edu/~perlin/noise/\n\nvar ImprovedNoise = function () {\n\n\tvar p = [ 151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,\n\t\t 23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,\n\t\t 174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,\n\t\t 133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,\n\t\t 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,\n\t\t 202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,\n\t\t 248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,\n\t\t 178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,\n\t\t 14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,\n\t\t 93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180 ];\n\n\tfor (var i = 0; i < 256 ; i ++) {\n\n\t\tp[256 + i] = p[i];\n\n\t}\n\n\tfunction fade(t) {\n\n\t\treturn t * t * t * (t * (t * 6 - 15) + 10);\n\n\t}\n\n\tfunction lerp(t, a, b) {\n\n\t\treturn a + t * (b - a);\n\n\t}\n\n\tfunction grad(hash, x, y, z) {\n\n\t\tvar h = hash & 15;\n\t\tvar u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n\t\treturn ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);\n\n\t}\n\n\treturn {\n\n\t\tnoise: function (x, y, z) {\n\n\t\t\tvar floorX = ~~x, floorY = ~~y, floorZ = ~~z;\n\n\t\t\tvar X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n\t\t\tx -= floorX;\n\t\t\ty -= floorY;\n\t\t\tz -= floorZ;\n\n\t\t\tvar xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n\t\t\tvar u = fade(x), v = fade(y), w = fade(z);\n\n\t\t\tvar A = p[X] + Y, AA = p[A] + Z, AB = p[A + 1] + Z, B = p[X + 1] + Y, BA = p[B] + Z, BB = p[B + 1] + Z;\n\n\t\t\treturn lerp(w, lerp(v, lerp(u, grad(p[AA], x, y, z),\n\t\t\t\t\t\t\tgrad(p[BA], xMinus1, y, z)),\n\t\t\t\t\t\tlerp(u, grad(p[AB], x, yMinus1, z),\n\t\t\t\t\t\t\tgrad(p[BB], xMinus1, yMinus1, z))),\n\t\t\t\t\tlerp(v, lerp(u, grad(p[AA + 1], x, y, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BA + 1], xMinus1, y, z - 1)),\n\t\t\t\t\t\tlerp(u, grad(p[AB + 1], x, yMinus1, zMinus1),\n\t\t\t\t\t\t\tgrad(p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n\t\t}\n\t}\n};\n\nmodule.exports = ImprovedNoise;\n", "var ImprovedNoise = require('./lib/ImprovedNoise.js');\n\n/**\n * Mountain component.\n */\nAFRAME.registerComponent('mountain', {\n  schema: {\n    color: {default: 'rgb(92, 32, 0)'},\n    shadowColor: {default: 'rgb(128, 96, 96)'},\n    sunPosition: {type: 'vec3', default: {x: 1, y: 1, z: 1}},\n    worldDepth: {default: 256},\n    worldWidth: {default: 256}\n  },\n\n  update: function () {\n    var data = this.data;\n\n    var worldDepth = data.worldDepth;\n    var worldWidth = data.worldWidth;\n\n    // Generate heightmap.\n    var terrainData = generateHeight(worldWidth, worldDepth);\n\n    // Texture.\n    var canvas = generateTexture(\n      terrainData, worldWidth, worldDepth, new THREE.Color(data.color),\n      new THREE.Color(data.shadowColor), data.sunPosition);\n    var texture = new THREE.CanvasTexture(canvas);\n\t\ttexture.wrapS = THREE.ClampToEdgeWrapping;\n\t\ttexture.wrapT = THREE.ClampToEdgeWrapping;\n\n    // Create geometry.\n    var geometry = new THREE.PlaneBufferGeometry(7500, 7500, worldWidth - 1, worldDepth - 1);\n    geometry.rotateX(- Math.PI / 2);\n\t\tvar vertices = geometry.attributes.position.array;\n\t\tfor (var i = 0, j = 0, l = vertices.length; i < l; i ++, j += 3) {\n\t\t  vertices[j + 1] = terrainData[i] * 10;\n    }\n\n    // Lower geometry.\n    geometry.translate(\n      0, -1 * (terrainData[worldWidth / 2 + worldDepth / 2* worldWidth] * 10 + 500), 0\n    );\n\n    // Create material.\n    var material = new THREE.MeshBasicMaterial({map: texture});\n\n    // Create mesh.\n    var mesh = new THREE.Mesh(geometry, new THREE.MeshBasicMaterial({map: texture}));\n    this.el.setObject3D('mesh', mesh);\n  }\n});\n\nfunction generateHeight (width, height) {\n  var size = width * height;\n  var data = new Uint8Array(size);\n  var perlin = new ImprovedNoise();\n  var quality = 1;\n  var z = Math.random() * 100;\n\n  for (var j = 0; j < 4; j ++) {\n    for (var i = 0; i < size; i ++) {\n      var x = i % width, y = ~~ (i / width);\n      data[i] += Math.abs(perlin.noise(x / quality, y / quality, z) * quality * 1.75);\n    }\n    quality *= 5;\n  }\n\n  return data;\n}\n\nfunction generateTexture (terrainData, width, height, color, colorShadow, sunPos) {\n  var sun = new THREE.Vector3(sunPos.x, sunPos.y, sunPos.z);\n  sun.normalize();\n\n  // Create canvas and context.\n  var canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n  var context = canvas.getContext('2d');\n  context.fillStyle = '#000';\n  context.fillRect(0, 0, width, height);\n\n  var image = context.getImageData(0, 0, canvas.width, canvas.height);\n  var imageData = image.data;\n\n  // Convert three.js rgb to 256.\n  var red = color.r * 256;\n  var green = color.g * 256;\n  var blue = color.b * 256;\n  var redShadow = colorShadow.r * 256;\n  var greenShadow = colorShadow.g * 256;\n  var blueShadow = colorShadow.b * 256;\n\n  var shade;\n  var vector3 = new THREE.Vector3(0, 0, 0);\n  for (var i = 0, j = 0, l = imageData.length; i < l; i += 4, j ++) {\n    vector3.x = terrainData[j - 2] - terrainData[j + 2];\n    vector3.y = 2;\n    vector3.z = terrainData[j - width * 2] - terrainData[j + width * 2];\n    vector3.normalize();\n    shade = vector3.dot(sun);\n    imageData[i] = (red + shade * redShadow) * (0.5 + terrainData[j] * 0.007);\n    imageData[i + 1] = (green + shade * blueShadow) * (0.5 + terrainData[j] * 0.007);\n    imageData[i + 2] = (blue + shade * greenShadow) * (0.5 + terrainData[j] * 0.007);\n  }\n\n  context.putImageData(image, 0, 0);\n\n  // Scaled 4x.\n  var canvasScaled = document.createElement('canvas');\n  canvasScaled.width = width * 4;\n  canvasScaled.height = height * 4;\n\n  context = canvasScaled.getContext('2d');\n  context.scale(4, 4);\n  context.drawImage(canvas, 0, 0);\n\n  image = context.getImageData(0, 0, canvasScaled.width, canvasScaled.height);\n  imageData = image.data;\n\n  for (var i = 0, l = imageData.length; i < l; i += 4) {\n    var v = ~~ (Math.random() * 5);\n    imageData[i] += v;\n    imageData[i + 1] += v;\n    imageData[i + 2] += v;\n  }\n\n  context.putImageData(image, 0, 0);\n  return canvasScaled;\n}\n\n/**\n * <a-mountain>\n */\nAFRAME.registerPrimitive('a-mountain', {\n  defaultComponents: {\n    mountain: {}\n  },\n\n  mappings: {\n    color: 'mountain.color',\n    'shadow-color': 'mountain.shadowColor',\n    'sun-position': 'mountain.sunPosition',\n    'world-depth' :'mountain.worldDepth',\n    'world-width' :'mountain.worldWidth'\n  }\n});\n"],
  "mappings": "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",
  "names": ["ImprovedNoise"]
}
